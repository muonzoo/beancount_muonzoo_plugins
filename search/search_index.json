{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#plugins","title":"Plugins","text":"<ul> <li><code>dynamic_forecast</code> - Compute Recurring Transactions with Expression Evaluation Support.</li> <li><code>metadata_spray</code> - add metadata to directives using pattern matching.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>src/beancount_muonzoo_plugins/ # plugins\n    dynamic_forecast.py        # Dynamically Compute Postings\n    metadata_spray.py          # `metadata_spray` plugin\n    *_test.py                  # unittests for same\nmkdocs.yml                     # The configuration file.\ndocs/\n    index.md                   # The documentation homepage.\n    ...                        # Other markdown pages, images and other files.\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>quotes might be useful but I'm not sure why</p> <p>This is a collection of loosely related <code>beancount</code> plugins that I have pulled together based on a variety of community sources and inspiration. While I've tried to credit where due; it may be incomplete. If you find something that needs correction, please let me know with an issue on the issue tracker.</p>"},{"location":"contributing/#about","title":"About","text":"<p>This document provides a set of best practices for open source contributions - bug reports, code submissions / pull requests, etc.</p> <p>This document is a derivation of contribution-guide.org's guideline document which is itself open source. Feedback &amp; suggestions for improvement are welcome.</p>"},{"location":"contributing/#submitting-bugs","title":"Submitting bugs","text":""},{"location":"contributing/#due-diligence","title":"Due diligence","text":"<p>Before submitting a bug, please do the following:</p> <ul> <li> <p>Perform basic troubleshooting steps:</p> <ul> <li>Make sure you're on the latest version. If you're not on the most   recent version, your problem may have been solved already! Upgrading is   always the best first step.</li> <li>Try older versions. If you're already on the latest release, try   rolling back a few minor versions (e.g. if on 1.7, try 1.5 or 1.6) and   see if the problem goes away. This will help the devs narrow down when   the problem first arose in the commit log.</li> <li>Try switching up dependency versions. If the software in question has   dependencies (other libraries, etc) try upgrading/downgrading those as   well.</li> </ul> </li> <li> <p>Search the issue   tracker to   make sure it's not a known issue.</p> </li> <li>If you find a pre-existing issue, review the conversation and consider adding   additional context, test cases or platform information that would help with   resolution of the issue. eg) everyone has reported and issue on MacOS but   you're also experiencing it on Linux.</li> </ul>"},{"location":"contributing/#what-to-put-in-your-bug-report","title":"What to put in your bug report","text":"<p>Make sure your report gets the attention it deserves: bug reports with missing information may be ignored or punted back to you, delaying a fix. The below constitutes a bare minimum; more info is almost always better:</p> <ul> <li>What operating system are you on? Windows? (10? 11? is it 64-bit?)   macOS? (Catalina/10.15? Ventura/13.6? Intel or ARM/Apple Silicon?) Linux?   (Which distro? Which version of that distro?) Again, more detail is better.</li> <li>What version of the core programming language interpreter/compiler are you   using? For example, if it's a Python project, are you using (C)Python   3.7.10? PyPy 3.10?</li> <li>Which version or versions of the software are you using? Ideally, you   followed the advice above and have ruled out (or verified that the problem   exists in) a few different versions.</li> <li>How did you install the runtime and software? Operating system packages?   pyenv? from source? Something like Conda, or a virtualenv?</li> <li> <p>How can the developers recreate the bug on their end? If possible,   include a copy of your code, the command you used to invoke it, and the full   output of your run (if applicable.)</p> <ul> <li>A common tactic is to pare down your code until a simple (but still   bug-causing) \"base case\" remains. Not only can this help you identify   problems which aren't real bugs, but it means the developer can get to   fixing the bug faster.</li> </ul> </li> </ul>"},{"location":"contributing/#contributing-changes","title":"Contributing changes","text":""},{"location":"contributing/#licensing-of-contributed-material","title":"Licensing of contributed material","text":"<p>Your contribution will be licensed as the rest of the project.</p> <p>Keep in mind as you contribute, that code, docs and other material submitted to open source projects are usually considered licensed under the same terms as the rest of the work.</p> <p>The details vary from project to project, but from the perspective of this document's authors:</p> <ul> <li> <p>Anything submitted to a project falls under the licensing terms in the   repository's top level <code>LICENSE</code> file.</p> <ul> <li>For example, if a project's <code>LICENSE</code> is BSD-based, contributors should   be comfortable with their work potentially being distributed in binary   form without the original source code.</li> </ul> </li> <li> <p>Per-file copyright/license headers are typically extraneous and undesirable.   Please don't add your own copyright headers to new files unless the project's   license actually requires them!</p> <ul> <li>Not least because even a new file created by one individual (who often   feels compelled to put their personal copyright notice at the top) will   inherently end up contributed to by dozens of others over time, making a   per-file header outdated/misleading.</li> </ul> </li> </ul>"},{"location":"contributing/#version-control-branching","title":"Version control branching","text":"<p>One branch, one change.</p> <ul> <li> <p>Always make a new branch for your work, no matter how small. This makes   it easy for others to take just that one set of changes from your repository,   in case you have multiple unrelated changes floating around.</p> <ul> <li>A corollary: don't submit unrelated changes in the same branch/pull   request! The maintainer shouldn't have to reject your awesome bugfix   because the feature you put in with it needs more review.</li> </ul> </li> <li> <p>Base your new branch off of the appropriate branch on the main   repository:</p> <ul> <li> <p>Bug fixes should be based on the branch named after the oldest   supported release line the bug affects.</p> <ul> <li>E.g. if a feature was introduced in 1.1, the latest release line is   1.3, and a bug is found in that feature - make your branch based on   1.1.  The maintainer will then forward-port it to 1.3 and main.</li> <li>Bug fixes requiring large changes to the code or which have a chance   of being otherwise disruptive, may need to base off of main   instead. This is a judgement call -- ask the devs!</li> </ul> </li> <li> <p>New features should branch off of the 'main' branch.</p> <ul> <li>Note that depending on how long it takes for the dev team to merge   your patch, the copy of <code>main</code> you worked off of may get out of   date! If you find yourself 'bumping' a pull request that's been   sidelined for a while, make sure you rebase or merge to latest   main to ensure a speedier resolution.</li> </ul> </li> </ul> </li> </ul>"},{"location":"contributing/#code-formatting","title":"Code formatting","text":"<p>TL;DR -  We use <code>ruff format</code> as configured in <code>pyproject.toml</code>.</p> <ul> <li>Follow the style you see used in the primary repository! Consistency with   the rest of the project always trumps other considerations. It doesn't matter   if you have your own style or if the rest of the code breaks with the greater   community - just follow along.</li> <li>Python projects usually follow the <code>PEP-8   &lt;http://www.python.org/dev/peps/pep-0008/&gt;</code>_ guidelines (though many have   minor deviations depending on the lead maintainers' preferences.)</li> </ul>"},{"location":"contributing/#documentation-isnt-optional","title":"Documentation isn't optional","text":"<p>It's not! Patches without documentation will be returned to sender.  By \"documentation\" we mean:</p> <ul> <li> <p>Docstrings (for Python; or API-doc-friendly comments for other languages)   must be created or updated for public API functions/methods/etc. (This step   is optional for some bugfixes.)</p> <ul> <li> <p>Don't forget to include <code>versionadded   &lt;https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-versionadded&gt;</code>/<code>versionchanged   &lt;https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-versionchanged&gt;</code> ReST   directives at the bottom of any new or changed Python docstrings!</p> <ul> <li>Use <code>versionadded</code> for truly new API members -- new methods,   functions, classes or modules.</li> <li>Use <code>versionchanged</code> when adding/removing new function/method   arguments, or whenever behavior changes.</li> </ul> </li> </ul> </li> <li> <p>New features should ideally include updates to prose documentation,   including useful example code snippets.</p> </li> <li>All submissions should have a changelog entry crediting the contributor   and/or any individuals instrumental in identifying the problem.</li> </ul>"},{"location":"contributing/#tests-arent-optional","title":"Tests aren't optional","text":"<p>Any bugfix that doesn't include a test proving the existence of the bug being fixed, may be suspect.  Ditto for new features that can't prove they actually work.</p> <p>We've found that test-first development really helps make features better architected and identifies potential edge cases earlier instead of later. Writing tests before the implementation is strongly encouraged.</p>"},{"location":"contributing/#full-example","title":"Full example","text":"<p>Here's an example workflow for a project <code>theproject</code> hosted on Github, which is currently in version 1.3.x. Your username is <code>yourname</code> and you're submitting a basic bugfix. (This workflow only changes slightly if the project is hosted at Bitbucket, self-hosted, or etc.)</p> <p>Preparing your Fork ^^^^^^^^^^^^^^^^^^^</p> <ol> <li>Click 'Fork' on Github, creating e.g. <code>yourname/theproject</code>.</li> <li>Clone your project: <code>git clone git@github.com:yourname/theproject</code>.</li> <li><code>cd theproject</code></li> <li><code>Create and activate a virtual environment &lt;https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments&gt;</code>_.</li> <li>Install the development requirements: <code>pip install -r dev-requirements.txt</code>.</li> <li>Create a branch: <code>git checkout -b foo-the-bars 1.3</code>.</li> </ol> <p>Making your Changes ^^^^^^^^^^^^^^^^^^^</p> <ol> <li>Add changelog entry crediting yourself.</li> <li>Write tests expecting the correct/fixed functionality; make sure they fail.</li> <li>Hack, hack, hack.</li> <li>Run tests again, making sure they pass.</li> <li>Commit your changes: <code>git commit -m \"Foo the bars\"</code></li> </ol> <p>Creating Pull Requests ^^^^^^^^^^^^^^^^^^^^^^</p> <ol> <li>Push your commit to get it back up to your fork: <code>git push origin HEAD</code></li> <li>Visit Github, click handy \"Pull request\" button that it will make upon    noticing your new branch.</li> <li>In the description field, write down issue number (if submitting code fixing    an existing issue) or describe the issue + your fix (if submitting a wholly    new bugfix).</li> <li>Hit 'submit'! And please be patient - the maintainers will get to you when    they can.</li> </ol>"},{"location":"dynamic_forecast/","title":"Dynamic Forecast","text":"<p>This plugin extends the (legacy) <code>forecast.py</code> plugin with context and evaluation of posting capabilities. Using metadata, beancount users can populate a context dictionary with inventories and balances, along with track events in order to compute a posting <code>Amount</code> that varies with the up-to-date state of the beancount journal.</p>"},{"location":"dynamic_forecast/#example","title":"Example","text":"<pre><code>    plugin \"beancount_muonzoo_plugins.dynamic_forecast\" \"{}\"\n    2011-01-01 open Equity:Opening-Balances\n    2011-01-01 open Expenses:Interest\n    2011-01-01 open Liabilities:Loan\n    2011-01-01 open Assets:Bank\n\n    2011-01-02 * \"Opening Position\"\n      Equity:Opening-Balances                  0 USD\n      Assets:Bank                        1000.00 USD\n      Liabilities:Loan                  -1000.00 USD\n\n    2011-01-03 balance Assets:Bank       1000.00 USD\n    2011-01-03 balance Liabilities:Loan -1000.00 USD\n\n    2011-02-01 event \"loan_rate\" \"0.12\"\n\n    2011-05-01 % \"Interest Charge [MONTHLY REPEAT 2 TIMES]\"\n      bal_acc_loan:          \"Liabilities:Loan\"\n      event_int_rate:        \"loan_rate\"\n      expr_monthly_interest: \"R(div(mul(gcu(loan,'USD'),D(int_rate)),D(12)),2)\"\n      Expenses:Interest     0 USD\n        expr: \"-monthly_interest\"\n      Liabilities:Loan      0 USD\n        expr: \"monthly_interest\"\n\n</code></pre> <p>Expands to:</p> <pre><code>    2011-01-01 open Equity:Opening-Balances\n    2011-01-01 open Expenses:Interest\n    2011-01-01 open Liabilities:Loan\n    2011-01-01 open Assets:Bank\n\n    2011-01-02 * \"Opening Position\"\n      Equity:Opening-Balances                  0 USD\n      Assets:Bank                        1000.00 USD\n      Liabilities:Loan                  -1000.00 USD\n\n    2011-01-03 balance Assets:Bank       1000.00 USD\n    2011-01-03 balance Liabilities:Loan -1000.00 USD\n\n    2011-02-01 event \"loan_rate\" \"0.12\"\n\n    2011-05-01 % \"Interest Charge\"\n      Expenses:Interest     10.00 USD\n      Liabilities:Loan     -10.00 USD\n\n    2011-06-01 % \"Interest Charge\"\n      Expenses:Interest     11.00 USD\n      Liabilities:Loan     -11.00 USD\n\n</code></pre>"}]}